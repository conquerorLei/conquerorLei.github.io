<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo+github搭建个人博客</title>
    <url>/2021/05/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>目前很多用户都使用<code>github page</code>进行静态个人博客网站的搭建。由于<code>git</code>的功能很强大，再配合<code>hexo</code>的<code>git</code>配置，直接上传到<code>github</code>上，经过短暂的等待，就可以通过指定的网站访问自己的博客，而且不用考虑后期维护的问题。说实话，真的很香。</p>
<span id="more"></span>

<p><code>GitHub Pages</code> 是由 <code>GitHub</code> 官方提供的一种免费的静态站点托管服务，让我们可以在 <code>GitHub</code> 仓库里托管和发布自己的静态网站页面。</p>
<p><code>Hexo</code> 是一个快速、简洁且高效的静态博客框架，它基于 <code>Node.js</code> 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<p>但是，通过上述方法搭建个人博客是有些小缺点的，就是每次上传到<code>github</code>之后都需要等待一段时间才能显示出修改，这一段时间可长可短。如果不想等待，还是自行购买云服务器，在云服务器上进行个人博客的搭建。</p>
<blockquote>
<p>本文为个人查漏补缺所用，暂时不写那么详细</p>
<p>最开始的git安装和github账户注册在这里不再进行赘述</p>
<p>不明白这些的同学，请自行查阅相关资料</p>
</blockquote>
<h1 id="安装node-js和git"><a href="#安装node-js和git" class="headerlink" title="安装node.js和git"></a>安装node.js和git</h1><h2 id="下载路径"><a href="#下载路径" class="headerlink" title="下载路径"></a>下载路径</h2><blockquote>
<p>git:   <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>node.js:   <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p>
<p>里面都有选项，请选择适合自己的版本下载</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装过程都是让人感觉很舒适的，直接一路点击<strong>next</strong>，直接使用上述两项的默认配置就可以。如果非要看着选，没关系，有一项很重要，是否添加到系统变量(system path)，这个没碰见就算了，碰见了一定要勾选上，一路<strong>next</strong>的话，就不用想这么过了</p>
<p>git安装成功后，在桌面右键，会出现<font color='cornflowerblue'>git bash</font>和<font color='cornflowerblue'>git gui</font>，如下图</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523201039.png" alt="image-20210523201027630"></p>
<p>node.js安装完成后，使用win+r打开运行，在运行的输入框中输入cmd，打开cmd，在cmd中输入node -v 以及npm -v看是否有版本显示，如下图</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523201639.png" alt="image-20210523201635647"></p>
<p>有版本显示就说明已经安装好了</p>
<h1 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h1><h2 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h2><p>在桌面上右键，点击<font color='cornflowerblue'>git bash here</font>，在里面输入以下语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置github全局用户名</span></span><br><span class="line">git config --global user.name &quot;你的GitHub 用户名&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置github全局邮箱</span></span><br><span class="line">git config --global user.email &quot;你的GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里每次输入一句并回车后并没有任何显示，但不要认为没有设置成功。</p>
<p>如果想要知道有没有设置成功，按照以下命名进行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list --global</span><br></pre></td></tr></table></figure>

<p>从输出的配置中查找<code>user.name</code>和<code>user.email</code>，如果存在说明设置成功了</p>
</blockquote>
<h2 id="创建并配置SSH秘钥"><a href="#创建并配置SSH秘钥" class="headerlink" title="创建并配置SSH秘钥"></a>创建并配置SSH秘钥</h2><p>在<font color='cornflowerblue'>git bash here</font>弹出的命令提示符，在里面输入以下语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>进入 [C:\Users\用户名\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 <code>id_rsa.pub</code> 文件并复制里面的内容。</p>
<p>登陆 <code>GitHub</code> ，进入 Settings 页面，选择左边栏的 <code>SSH and GPG keys</code>，点击 <code>New SSH key</code>。</p>
<p>Title 随便取个名字，粘贴复制的 <code>id_rsa.pub</code> 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523204050.png" alt="image-20210523204048789"></p>
<h2 id="验证链接"><a href="#验证链接" class="headerlink" title="验证链接"></a>验证链接</h2><p>在<font color='cornflowerblue'>git bash here</font>弹出的命令提示符，在里面输入以下语句，出现 “Are you sure……”，输入 yes 回车确认。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>连接成功的，会弹出以下字样</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523205341.png" alt="image-20210523205339419"></p>
<blockquote>
<p>说明：不要管后面那个”but Github does not provide shell access”。</p>
<p>实在好奇为什么的话，以下是翻译</p>
<p>你已经成功验证，但是Github不提供shell访问</p>
</blockquote>
<h1 id="创建Github-Pages仓库"><a href="#创建Github-Pages仓库" class="headerlink" title="创建Github Pages仓库"></a>创建Github Pages仓库</h1><p>GitHub 主页右上角加号 -&gt; New repository</p>
<ul>
<li>输入<code>Repository name</code>，按照以下格式<code>用户名.github.io</code></li>
<li>选择<code>public</code></li>
<li>勾选<code>Add a README file</code></li>
<li>点击<code>Create Repository</code></li>
</ul>
<blockquote>
<p>说明：不勾选<code>Add a README file</code>也可以，因为如果后面没有配置，最后第一次上传到github上就会删除初始化的<code>README</code>文档，这个就留给读者自行努力吧</p>
</blockquote>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523203717.png" alt="image-20210523203715559"></p>
<p>创建后默认自动启用 <code>HTTPS</code>，博客地址为：<code>https://用户名.github.io</code></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>新建一个文件夹用来存放 Hexo 的程序文件，如 hexo。打开该文件夹，右键 点击<code>Git Bash Here</code>。</p>
<h2 id="下载安装hexo程序"><a href="#下载安装hexo程序" class="headerlink" title="下载安装hexo程序"></a>下载安装hexo程序</h2><p>使用<code>npm</code>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：由于采用的是国外的下载源，所以网速慢是正常的，可能会有很长一段时间没有反应，耐心等待</p>
</blockquote>
<h2 id="Hexo初始化和本地预览"><a href="#Hexo初始化和本地预览" class="headerlink" title="Hexo初始化和本地预览"></a>Hexo初始化和本地预览</h2><p>在<code>Git Bash Here</code>弹出的命令提示符中输入一下命令，初始化并安装组件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hexo程序初始化文件夹hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装组件</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>本地预览，输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清理，渲染生成页面，启动服务端</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>访问<code>Http://localhost:4000/</code>，出现默认界面，本地博客安装成功</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523212719.png" alt="image-20210523212717096"></p>
<blockquote>
<p>说明：如果出现页面加载不出来，可能是端口被占用了。<code>Ctrl+C</code> 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>
</blockquote>
<h1 id="部署hexo到Github-pages"><a href="#部署hexo到Github-pages" class="headerlink" title="部署hexo到Github pages"></a>部署hexo到Github pages</h1><p>首先是安装<code>hexo-deployer-git</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后按照图片展示的修改博客文件夹根目录下的<code>_config.yml</code>末尾部分，修改后保存</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210523213658.png" alt="image-20210523213657537"></p>
<blockquote>
<p>说明：</p>
<ul>
<li>:    后面有一个空格，一定要注意这一点</li>
<li>另外就是<code>repo</code>使用的是你的博客仓库的SSH地址，因为我们是通过SSH授权连接的</li>
</ul>
</blockquote>
<p>最后就是部署，在<code>git bash here</code>弹出的命令行中输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存，渲染产生页面，部署发布</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>这样，一个未经过任何配置的个人博客就已经制作好啦！下一篇文章为hexo的配置，主体的安装配置和基础美化。</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next配置</title>
    <url>/2021/05/24/hexo-next%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hexo环境搭建结束后，如果想要更近一步个性化，就需要调整配置啦</p>
<p>以下是我对Hexo的配置，主体我选择的是Next主题。Next主题足够轻量简约，不会对Github pages 造成很大的压力，如有大量的动画渲染，可能会造成网页渲染过慢等缺点。这里写一下通配。</p>
<span id="more"></span>

<h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><h2 id="安装并更换Next主题"><a href="#安装并更换Next主题" class="headerlink" title="安装并更换Next主题"></a>安装并更换Next主题</h2><p>在hexo的根目录下右键<code>git bash here</code>，在里面输入以下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>克隆完成后，只要修改一下根目录下的<code>_config.yml</code>，在里面找到theme并启用next就可以了</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210524171808.png" alt="image-20210524171757123"></p>
<h2 id="个人信息修改"><a href="#个人信息修改" class="headerlink" title="个人信息修改"></a>个人信息修改</h2><p>修改一下根目录下的<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hexo//</span> <span class="string">站点名称</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">//</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">//</span> <span class="string">站点描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">//</span> <span class="string">关键词用于检索站点</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span> <span class="string">//</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="string">//</span> <span class="string">语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：站点无需解释，就是你通过<a href="http://localhost:4000/%E6%88%96%E8%80%85https://username.github.io/%E6%89%93%E5%BC%80%E7%9A%84%E7%BD%91%E9%A1%B5%EF%BC%8C%E9%82%A3%E4%B8%AA%E5%B0%B1%E6%98%AF%E4%BD%A0%E7%9A%84%E7%AB%99%E7%82%B9%E3%80%82%E7%AB%99%E7%82%B9%E7%9A%84%E6%A0%87%E9%A2%98%E5%B0%B1%E6%98%AF">http://localhost:4000/或者https://username.github.io/打开的网页，那个就是你的站点。站点的标题就是</a></p>
</blockquote>
<h2 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h2>]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2021/05/22/database/</url>
    <content><![CDATA[<h1 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h1><p>采用MyBatis防止SQL注入的问题，降低关系耦合</p>
<span id="more"></span>

<h1 id="对JDBC连接进行统一管理"><a href="#对JDBC连接进行统一管理" class="headerlink" title="对JDBC连接进行统一管理"></a>对JDBC连接进行统一管理</h1><p>使用jdbc.properties对JDBC进行统一管理，在多人协作过程中，由于个人数据库的基本配置信息不同，会出现很多数据库连接更换的过程，使用jdbc.properties进行统一管理的目的就是能够很快的更改jdbc配置</p>
<h1 id="索引异常"><a href="#索引异常" class="headerlink" title="索引异常"></a>索引异常</h1><p>在进行数据库接口测试的过程中，前端发送过来的信息可能不满足建表时的约束，例如唯一性约束，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">check</span>(sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果此时前端发送过来的是空字符串，就会出现约束异常</p>
<h1 id="Data-too-lang"><a href="#Data-too-lang" class="headerlink" title="Data too lang"></a>Data too lang</h1><p>对于某一些基础信息，很容易出现输入的字符串长度和数据库预设表列长度不符的情况，这样就会出现Data too lang异常</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>picgo+gitee</title>
    <url>/2021/05/22/picgo+gitee/</url>
    <content><![CDATA[<h1 id="picgo-gitee实现markdown图片上传自动化"><a href="#picgo-gitee实现markdown图片上传自动化" class="headerlink" title="picgo+gitee实现markdown图片上传自动化"></a>picgo+gitee实现markdown图片上传自动化</h1><span id="more"></span>

<h2 id="1-工具"><a href="#1-工具" class="headerlink" title="1 工具"></a>1 工具</h2><p>markdown编辑工具：typora</p>
<p>图片上传工具：picgo 2.3.0      <a href="https://github.com/Molunerfinn/PicGo/releases">下载地址</a></p>
<p>图床仓库：gitee</p>
<h2 id="2-picgo配置"><a href="#2-picgo配置" class="headerlink" title="2 picgo配置"></a>2 picgo配置</h2><p>picgo的配置很简单，主要在于插件的下载以及相关的gitee配置。</p>
<h3 id="2-1-picgo插件下载"><a href="#2-1-picgo插件下载" class="headerlink" title="2.1 picgo插件下载"></a><strong>2.1</strong> picgo插件下载</h3><p>若想要picgo支持gitee作为图床，需要下载插件，在picgo界面上选择<code>插件设置</code>，在搜索框中直接搜索gitee，会弹出以下界面，两个二选一即可。<font color='red'>安装完成后一定要重启picgo</font>，这样才能在图床设置中找到gitee图床</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226232647.png" alt="image-20210226232647413"></p>
<h3 id="2-2-图床设置–-gt-gitee图床"><a href="#2-2-图床设置–-gt-gitee图床" class="headerlink" title="2.2  图床设置–&gt;gitee图床"></a><strong>2.2</strong>  图床设置–&gt;gitee图床</h3><p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226233412.png" alt="image-20210226233412611"></p>
<p>初始进入以后上述输入框都应该是空的，相应的意思如下</p>
<ul>
<li><font color='cornflowerblue'>owner</font>：gitee账户的用户名，不清楚的可以在个人设置中查看</li>
<li><font color='cornflowerblue'>repo</font>：仓库名，专门用作图床的仓库（没有的需要新建，新建仓库在步骤三中）</li>
<li><font color='cornflowerblue'>path</font>：可填可不填，就是仓库中用于存放picgo上传图片的路径</li>
<li><font color='cornflowerblue'>token</font>：个人令牌，对你的图床仓库进行个人令牌设定就会出现token，复制到这里就可以</li>
<li><font color='cornflowerblue'>message</font>：可填可不填，就是上传图片相当于一次git push操作，commit需要文本信息用来提示你这次上传是干嘛的</li>
</ul>
<h2 id="3-gitee图床仓库设置"><a href="#3-gitee图床仓库设置" class="headerlink" title="3 gitee图床仓库设置"></a>3 gitee图床仓库设置</h2><h3 id="3-1-新建仓库"><a href="#3-1-新建仓库" class="headerlink" title="3.1 新建仓库"></a>3.1 新建仓库</h3><p>和平常新建仓库没有什么区别，有几点注意事项</p>
<ul>
<li>需要设置为开源</li>
<li>需要使用Readme文件初始化仓库</li>
</ul>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226234635.png" alt="image-20210226234635222"></p>
<p>图中标注的地方需要注意一下</p>
<h3 id="3-2-创建个人令牌（token）"><a href="#3-2-创建个人令牌（token）" class="headerlink" title="3.2 创建个人令牌（token）"></a>3.2 创建个人令牌（token）</h3><p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226235244.png" alt="image-20210226235243952"></p>
<p><font color='red'>tips</font>：其实，这里省略了以个步骤，就是原始打开第二步之后不会直接弹出如图所示界面，需要新建一个令牌，点击的是一个加号</p>
<p>按照上述步骤进行操作之后，就会得到一个token，<font color='red'>pay attention</font>：token只会出现一次，所以复制下来保存到本地的文件当中。</p>
<p>将刚刚获取的token粘贴到picgo中的gitee配置里面去，点击确定就大功告成。</p>
<p>这样picgo上传的图片就会上传到gitee中仓库里。</p>
<h2 id="4-typora与picgo结合使用"><a href="#4-typora与picgo结合使用" class="headerlink" title="4 typora与picgo结合使用"></a>4 typora与picgo结合使用</h2><h3 id="4-1-picgo设置"><a href="#4-1-picgo设置" class="headerlink" title="4.1 picgo设置"></a>4.1 picgo设置</h3><p>picgo中需要配置一下服务器，也就是<code>设置server</code></p>
<p>开启server之后的默认配置就是127.0.0.1:36677，不需要修改什么。</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210227000426.png" alt="image-20210227000426714"></p>
<h3 id="4-2-typora设置"><a href="#4-2-typora设置" class="headerlink" title="4.2 typora设置"></a>4.2 typora设置</h3><p>在typora中的偏好设置中找到图像，按照picgo的本地安装路径进行相应的修改。</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210227000143.png" alt="image-20210227000143486"></p>
<p>图中标记的三个地方需要修改。可以点击<code>验证图片上传选项</code>，如图显示表示typora已经成功使用picgo上传图片到仓库</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210227000653.png" alt="image-20210227000653809"></p>
<p>至此结束。</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Sundry</tag>
      </tags>
  </entry>
  <entry>
    <title>http error</title>
    <url>/2021/05/22/HTTP/</url>
    <content><![CDATA[<h1 id="404-not-found"><a href="#404-not-found" class="headerlink" title="404 not found"></a>404 not found</h1><p>404表示资源没有找到，由于Tomcat容器的问题，在前端页面例如jsp、html中有对css、js文件的相对寻址。这样在由于不同文件的更目录不同，就会出现不同的基址，过程中出现了不少的资源无法访问的异常</p>
<span id="more"></span>

<p>解决办法：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- 设置基址 --&gt;</span><br><span class="line">&lt;%--&lt;base href=<span class="string">&quot;http://localhost:8080/public_platform_war_exploded/&quot;</span>/&gt;--%&gt;</span><br><span class="line">&lt;%--&lt;base href=<span class="string">&quot;http://188.131.151.113:8080/public_platform/&quot;</span>/&gt;--%&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>最开始，是在本地编程，所以设置的基址为localhost，后来上云服务器之后需要不断地在localhost和188.131.151.113之间进行切换，很麻烦，经过查询jsp相关可知，采用<base href="${pageContext.request.contextPath}/"/>可以直接处理本地和云差异引起的资源访问异常。</p>
<h1 id="500异常"><a href="#500异常" class="headerlink" title="500异常"></a>500异常</h1><p>500一般都是后端业务逻辑出问题了才会出现出现500异常，其实也是一些例如request和session设置属性不对应，页面跳转异常等其他问题。</p>
<h1 id="使用配对异常"><a href="#使用配对异常" class="headerlink" title="使用配对异常"></a>使用配对异常</h1><p>一般而言，若是对request进行属性设置，则需要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;跳转地址&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure>

<p>进行数据转发，若使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;跳转地址&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>就会出现无法获取request属性的错误</p>
<p>使用session再进行重定向就不会出现问题，session周期要比request周期长，上述过程一次request周期已经结束</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow-numpy-matplotlib线性回归</title>
    <url>/2021/05/24/tensorflow-numpy-matplotlib%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
        <category>神经网络与机器学习</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
        <tag>Matplotlib</tag>
        <tag>Tensorflow</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法·方阵</title>
    <url>/2021/05/22/%E6%96%B9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="方阵"><a href="#方阵" class="headerlink" title="方阵"></a>方阵</h1><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>广场上的小朋友们排成了整齐的方阵。具体来说，我们可以把每个小朋友看做是一个点，那么小朋友们就形成了n×n的点阵。</p>
<p>方阵中，小朋友A和小朋友B互相可以看见，当且仅当二人之间的连线不经过别的小朋友，且他们之间的距离不超过k。我们想知道有多少对小朋友互相可以看见。(A,B)与 (B,A)算同一对。</p>
<p>例如，n=2,k=1时答案为4，n=2,k=2 时答案为6，n=3,k=2时答案为20。</p>
<p>现在我们想要知道，当n=1000,k=500时的答案是多少。由于答案过大，请回答对10^9+7取模后的结果。</p>
<span id="more"></span>

<h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>两人对视时没有人遮拦视线，即表示两人之间连线没有任何人。而放在方阵中的直线我们可以分为两种，一种是“横平竖直”的直线，另一种是“斜线”。因此我们可以分为两种情况去讨论。</p>
<h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>由上面的理解可知，分两种情况讨论：</p>
<ol>
<li>对于“横平竖直”情况，即边框线上的情况。对于一行，只有两两相邻的两点才可以互相看见，故而一行有<code>(n-1)</code>对，一共n行，故而行方向上一共有<code>n*(n-1)</code>对点；同样在列方向上，也有<code>n*(n-1)</code>对，故而一共有<code>2*n*(n-1)</code>对</li>
<li>对于“斜线”的情况<img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210522161027.png" alt="Alt text" title="方阵斜线算法"></li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat error</title>
    <url>/2021/05/22/tomcatError/</url>
    <content><![CDATA[<h1 id="1099端口已经被占用"><a href="#1099端口已经被占用" class="headerlink" title="1099端口已经被占用"></a>1099端口已经被占用</h1><p>经常会出现tomcat被占用的情况，并且经过反复核对没有其他项目在本地tomcat服务器上运行，本次项目也没有运行但是在编译运行的过程中idea会报<code>Address localhost:1099 is already in use</code>的错误，本次学习到了如何强行关闭占用端口号的<code>java</code>程序。</p>
<span id="more"></span>

<h2 id="win-R打开控制面板"><a href="#win-R打开控制面板" class="headerlink" title="win+R打开控制面板"></a>win+R打开控制面板</h2><h2 id="查询1099"><a href="#查询1099" class="headerlink" title="查询1099"></a>查询1099</h2><p>输入 <code>netstat -ano | find &quot;1099&quot;</code>，回车后看到以下结果</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226231240.png" alt="1099-1"></p>
<h2 id="查询20560"><a href="#查询20560" class="headerlink" title="查询20560"></a>查询20560</h2><p>将上图中最后一列数据记录下来，执行以下指令 <code>tasklist | find &quot;20560&quot;</code>，其中20560就是上图最后一列的值，执行后得到以下结果</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226231242.png" alt="1099-2"></p>
<h2 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h2><p>杀掉刚刚查询到的进程，执行以下指令 <code>killtask /f /t /im java.exe</code>，得到以下结果</p>
<p><img src="https://gitee.com/QingShanxl/pictures/raw/master/img/20210226231244.png"></p>
<p>1.5 现在就可以运行了，当然最好的习惯还是记得关闭tomcat服务</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
</search>
